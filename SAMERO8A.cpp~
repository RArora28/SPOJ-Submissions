#include<bits/stdc++.h>
#include<limits.h>
using namespace std;

#define mod 1000000007
#define si(x) scanf("%d", &x)
#define sll(x) scanf("%lld", &x)
#define pi(x) printf("%d\n", x)
#define pll(x) printf("%lld\n", x)
#define LL long long int
#define ii pair<int, int>
#define vii vector<pair<int, int> >
#define vi vector<int>
#define adjList vector<vector<int> >
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define rep(i, z, q) for(i = z; i < q; i++)
#define rev(i, z, q) for(i = z; i > q; i--)
#define INF 1061109567

#define gc getchar_unlocked

int read_int() {
  char c = gc();
  while(c<'0' || c>'9') c = gc();
  int ret = 0;
  while(c>='0' && c<='9') {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret;
}

int d1[510], d2[510], A[510];
bool flag[510];
int taken[510];
int i, n, k, m, s, t, x, y, w;

//dijkstra's n^2

int min_dis(int arr[],int fl[]) {

  int i;
  int Min = arr[0], ans = 0;
  
  rep(i, 1, n) 
    if(!fl[i] && arr[i] < Min)
      ans = i;

  return ans;
}

void shortest_path(int dis[], int source) {
  
  //priority_queue <ii, vii, greater<ii > > p;
  int i, d, u;
  int R[n+1];

  rep(i, 0. n)
    R[i] = false;

  dis[source] = 0;
  
  rep(i, 0, n) {
    
    u = min_dis(dis, R);
    
    flag[u] = true;
    
    for(vii::iterator it = adj[u].begin(); it != adj[u].end(); it++) 
      if(d + (*it).fi < dis[(*it).se] && !R[(*it).se]) 
	dis[(*it).se] = d + (*it).fi;
  }
  
  return;
}

void dfs(int v, vector<vii> adj1) {

  taken[v] = 1;
  
  for(vii::iterator it = adj1[v].begin(); it != adj1[v].end(); it++) 
    if(!taken[(*it).se] && (flag[v] && !flag[(*it).se] || !flag[v])) { 
      A[(*it).se] = A[v] + (*it).fi;
      dfs((*it).se, adj1);
    }
  
  return;
}


int main() {

  while(1) {

    vector<vii> adj1, adj2;

    n = read_int();
    m = read_int();
    
    if(n == 0 && m == 0)
      return 0;

    s = read_int();
    t = read_int();
   
    rep(i, 0, n) {
      flag[i] = false;
      d1[i] = d2[i] = INF;
      A[i] = -1;
      taken[i] = 0;
    }
    
    adj1.resize(n);
    adj2.resize(n);
    
    rep(i, 1, m+1) {

      x = read_int();
      y = read_int();
      w = read_int();
    
      adj1[x].pb(ii(w, y));
      adj2[y].pb(ii(w, x));
    }

    A[s] = 0;
    
    shortest_path(d1, s, adj1);
    LL ans = d1[t];
    shortest_path(d2, t, adj2);
    
    rep(i, 0, n) 
      if(d1[i] + d2[i] == ans)
	flag[i] = true;
    
    dfs(s, adj1);

    pi(A[t]);
  }

return 0;
}


