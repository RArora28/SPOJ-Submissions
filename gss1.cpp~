#include<bits/stdc++.h>
#include<limits.h>
using namespace std;

#define mi 1000000007

#define si(x) scanf("%d", &x)
#define sll(x) scanf("%lld", &x)
#define pi(x) printf("%d\n", x)
#define pll(x) printf("%lld\n", x)

#define ii pair<int, int>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define adjList vector<vector<int> >

#define ll long long int

#define pb push_back
#define mp make_pair

#define fi first
#define se second

#define rep(i, z, q) for(i = z; i < q; i++)
#define rev(i, z, q) for(i = z; i > q; i--)

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }

ll power(ll a,ll b) {

  ll ans = 1;  

  while(b > 0){
    if(b & 1)
      ans = ((ans % mi) *(a % mi)) % mi;
    a=((a % mi)*(a % mi)) % mi;
    b >>= 1;
  }
  
  return ans;
}

struct node {
  int sum , left, right, ans;

  
  node(int par) {
    sum = left = right = ans = par;
  }
};

int arr[100000];
node tree[100000] = node(0);

void merge(node p, node c1, node c2) {
  p.sum = c1.sum + c2.sum;
  p.left = max(c1.left, c1.sum + c2.left);
  p.right = max(c2.right, c2.sum + c1.right);
  p.ans = max(c1.right+c2.left, max(c1.ans, c2.ans));
  return;
}

void build(int arr[], node tree[], int low, int high, int pos) {

  if(low == high) {
    tree[pos]=node(arr[low]);
    return;
  }

  mid = (low + high) / 2;

  build(arr, tree, low, mid, pos);
  build(arr, tree, mid + 1, high, pos);
  merge(tree[pos], tree[2*pos+1], tree[2*pos+2]);
  return;
}

void rmq(int firfo )
int main() {

  int n, i, m;

  cin>>n;

  rep(i, 0, n) 
    cin>>arr[i];

  build(arr, tree, 0, n-1, 0);

  cin>>m;

  int x, y;
  while(m--) {
    cin>>x>>y;
  }
  
  return 0;
}

