/* Rishabh Arora
   IIIT-Hyderabad */

#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector<int> VI;
typedef vector<II> VII;
typedef long long int LL;
typedef unsigned long long int ULL;

#define rep(i, a, b) for(i = a; i < b; i++)
#define rev(i, a, b) for(i = a; i > b; i--)
#define INF INT_MAX
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SET(a,b) memset(a, b, sizeof(a))

//debugging statements
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int N = 1e5+10;
const int mod = 1e9+7;
const int LOGN = 20;

int n, m;
int R[N], depth[N], par[N], P[N][LOGN], a[N];
vector<VI> g;
map<int, int> M;

struct node {
    int count;
    node *left, *right;
    node(){}
    node(int c, node * l, node * r) {
        count = c, left = l, right = r;
    }
    node *insert(int low, int high, int w) {
        if(low == high) {
            node *null = new node(0, NULL, NULL);
            return new node(this->count+1, null, null);
        }
        else if((low < w) || (high > w))
            return this;

        int mid  = (low + high) >> 1;
        return new node(this->count+1, (this->left)->insert(low, mid, w), (this->right)->insert(mid+1, high, w)); 
    }
};  
        
node *root[N];
node *null = new node(0, NULL, NULL);

void dfs(int v, int p) {
    par[v] = p;
    depth[v] = (p == -1 ? 0 : depth[p] + 1);
    root[v] = (p == -1 ? NULL : root[p])->insert(1, n, M[a[v]]);
    for(auto u : g[v]) {
        if(u != p) {
            dfs(u, v);
        }   
    }
    return;    
}

int query(node *a, node *b, node *c, node *d, int low, int high, int K) {
    if(low == high) { 
        return low;
    }
    int sum = a->count + b->count - c->count - d->count;
    int mid = (low + high) >> 1;
    if(sum >= K) {
        return query(a->right, b->right, c->right, d->right, low, mid, K-sum);
    }
    return query(a->left, b->left, c->left, d->left, low, mid, K);
}

void preprocess(int n) {
    int i, j;
    SET(P, -1);
    rep(i, 1, n+1) {
        P[i][0] = par[i];
    }
    for(j = 1; 1 << j < n; j++) {
        rep(i, 1, n+1) {
            if(P[i][j-1] != -1) {
                P[i][j] = P[P[i][j-1]][j-1];
            } 
        }
    }
}
int lca(int p, int q) { 
 int i;
  if(depth[p] < depth[q])
    swap(p, q);
  int log;
  for(log = 1; (1 << log) <= depth[p]; log++);
  log--;
  rev(i, log, -1) {
    if(depth[p] - (1 << i) >= depth[q])
      p = P[p][i];
  }
  if(p == q)
    return p;
  rev(i, log, -1) 
    if(P[p][i] != -1 && P[p][i] != P[q][i])
      p = P[p][i], q = P[q][i];
  return par[p];
}

int main() {

  ios::sync_with_stdio(false);	
  cin.tie(NULL);
  
  int i;
  cin >> n >> m;
  g.resize(n+1);
  rep(i, 1, n+1) {
    cin >> a[i];
    M[a[i]];
  }    

  //cordinate-compression
  int ind = 1;
  for(auto x : M) {
    M[x.F] = ind++;
    R[ind-1] = x.F;
  }

  int a, b;
  rep(i, 1, n) {
    cin >> a >> b;
    g[a].PB(b);
    g[b].PB(a);
  }

  g[0].PB(1);
  dfs(0, -1);
  preprocess(n);
  //lca ki bachchodi karni hai yahan;

  root[0] = null;
  while(m--) {
    int u, v, k;
    cin >> u >> v >> k;
    int l = lca(u, v);
    int p = par[l];
    if (p == -1) p = 0;
    cout << R[query(root[u], root[v], root[l], root[p], 1, n, k)] << '\n';
  }
  return 0;
}
